{
    "plugins": [
      "babel",
      "react"
    ],
    "parser": "babel-eslint",          // https://github.com/babel/babel-eslint
    "env": {                           // http://eslint.org/docs/user-guide/configuring.html#specifying-environments
      "browser": true,                 // browser global variables
      "node": true,                    // Node.js global variables and Node.js-specific rules
      "es6": true
    },
    "ecmaFeatures": {
      "arrowFunctions": true,
      "blockBindings": true,
      "classes": true,
      "defaultParams": true,
      "destructuring": true,
      "forOf": true,
      "generators": false,
      "modules": true,
      "objectLiteralComputedProperties": true,
      "objectLiteralDuplicateProperties": false,
      "objectLiteralShorthandMethods": true,
      "objectLiteralShorthandProperties": true,
      "restParams": true,
      "spread": true,
      "superInFunctions": true,
      "templateStrings": true,
      "jsx": true
    },
    "rules" : {
        // babel inserts `"use strict";` for us
        "strict": [2, "never"],

        /*
         *  ES6
         */

        // require parens in arrow function arguments
        "arrow-parens": 0,
        // require space before/after arrow function's arrow
        "arrow-spacing": 0,
        // verify super() callings in constructors
        "constructor-super": 0,
        // enforce the spacing around the * in generator functions
        "generator-star-spacing": 0,
        // disallow modifying variables of class declarations
        "no-class-assign": 0,
        // disallow modifying variables that are declared using const
        "no-const-assign": 2,
        // disallow to use this/super before super() calling in constructors.
        "no-this-before-super": 0,
        // require let or const instead of var
        "no-var": 2,
        // require method and property shorthand syntax for object literals
        "object-shorthand": 0,
        // suggest using of const declaration for variables that are never modified after declared
        "prefer-const": 1,
        // suggest using the spread operator instead of .apply()
        "prefer-spread": 0,
        // suggest using Reflect methods where applicable
        "prefer-reflect": 0,
        // disallow generator functions that do not have yield
        "require-yield": 0,


        /*
         *  Best practices
         */

        // Enforces getter/setter pairs in objects
        "accessor-pairs": 0,
        // treat var statements as if they were block scoped
        "block-scoped-var": 2,
        // specify the maximum cyclomatic complexity allowed in a program
        "complexity": [0, 11],
        // require return statements to either always or never specify values
        "consistent-return": 2,
        // specify curly brace conventions for all control statements
        "curly": [1, "all"],
        // require default case in switch statements
        "default-case": 2,
        // encourages use of dot notation whenever possible
        "dot-notation": [1, { "allowKeywords": true}],
        // enforces consistent newlines before or after dots
        "dot-location": 0,
        // require the use of === and !==
        "eqeqeq": 2,
        // make sure for-in loops have an if statement
        "guard-for-in": 2,
        // disallow the use of alert, confirm, and prompt
        "no-alert": 1,
        // disallow use of arguments.caller or arguments.callee
        "no-caller": 2,
        // disallow division operators explicitly at beginning of regular expression
        "no-div-regex": 0,
        // disallow else after a return in an if
        "no-else-return": 2,
        // disallow use of labels for anything other then loops and switches
        "no-empty-label": 2,
        // disallow comparisons to null without a type-checking operator
        "no-eq-null": 0,
        // disallow use of eval()
        "no-eval": 2,
        // disallow adding to native types
        "no-extend-native": 2,
        // disallow unnecessary function binding
        "no-extra-bind": 2,
        // disallow fallthrough of case statements
        "no-fallthrough": 2,
        // disallow the use of leading or trailing decimal points in numeric literals
        "no-floating-decimal": 2,
        // disallow the type conversions with shorter notations
        "no-implicit-coercion": 0,
        // disallow use of eval()-like methods
        "no-implied-eval": 2,
        // disallow this keywords outside of classes or class-like objects
        "no-invalid-this": 0,
        // disallow usage of __iterator__ property
        "no-iterator": 2,
        // disallow use of labeled statements
        "no-labels": 2,
        // disallow unnecessary nested blocks
        "no-lone-blocks": 2,
        // disallow creation of functions within loops
        "no-loop-func": 2,
        // disallow use of multiple spaces
        "no-multi-spaces": 1,
        // disallow use of multiline strings
        "no-multi-str": 2,
        // disallow reassignments of native objects
        "no-native-reassign": 2,
        // disallow use of new operator when not part of the assignment or comparison
        "no-new": 2,
        // disallow use of new operator for Function object
        "no-new-func": 2,
        // disallows creating new instances of String,Number, and Boolean
        "no-new-wrappers": 2,
        // disallow use of (old style) octal literals
        "no-octal": 2,
        // disallow use of octal escape sequences in string literals, such as
        // var foo = "Copyright \251";
        "no-octal-escape": 2,
        // disallow reassignment of function parameters
        "no-param-reassign": 2,
        // disallow use of process.env
        "no-process-env": 0,
        // disallow usage of __proto__ property
        "no-proto": 2,
        // disallow declaring the same variable more then once
        "no-redeclare": 2,
        // disallow use of assignment in return statement
        "no-return-assign": 2,
        // disallow use of `javascript:` urls.
        "no-script-url": 2,
        // disallow comparisons where both sides are exactly the same
        "no-self-compare": 2,
        // disallow use of comma operator
        "no-sequences": 2,
        // restrict what can be thrown as an exception
        "no-throw-literal": 2,
        // disallow usage of expressions in statement position
        "no-unused-expressions": 2,
        // disallow unnecessary .call() and .apply()
        "no-useless-call": 0,
        // disallow use of void operator
        "no-void": 0,
        // disallow usage of configurable warning terms in comments: e.g. todo
        "no-warning-comments": [0, { "terms": ["todo", "fixme", "xxx"], "location": "start" }],
        // disallow use of the with statement
        "no-with": 2,
        // require use of the second argument for parseInt()
        "radix": 2,
        // requires to declare all vars on top of their containing scope
        "vars-on-top": 2,
        // require immediate function invocation to be wrapped in parentheses
        "wrap-iife": [2, "any"],
        // require or disallow Yoda conditions
        "yoda": 2,

        /*
         *  Errors
         */

        // disallow trailing commas in object literals
        "comma-dangle": [1, "never"],
        // disallow assignment in conditional expressions
        "no-cond-assign": [2, "always"],
        // disallow use of console
        "no-console": 0,
        // disallow use of constant expressions in conditions
        "no-constant-condition": 1,
        // disallow control characters in regular expressions
        "no-control-regex": 2,
        // disallow use of debugger
        "no-debugger": 1,
        // disallow duplicate arguments in functions
        "no-dupe-args": 2,
        // disallow duplicate keys when creating object literals
        "no-dupe-keys": 2,
        // disallow a duplicate case label.
        "no-duplicate-case": 2,
        // disallow the use of empty character classes in regular expressions
        "no-empty-character-class": 2,
        // disallow empty statements
        "no-empty": 1,
        // disallow assigning to the exception in a catch block
        "no-ex-assign": 2,
        // disallow double-negation boolean casts in a boolean context
        "no-extra-boolean-cast": 0,
        // disallow unnecessary parentheses
        "no-extra-parens": [2, "functions"],
        // disallow unnecessary semicolons
        "no-extra-semi": 2,
        // disallow overwriting functions written as function declarations
        "no-func-assign": 2,
        // disallow function or variable declarations in nested blocks
        "no-inner-declarations": 2,
        // disallow invalid regular expression strings in the RegExp constructor
        "no-invalid-regexp": 2,
        // disallow irregular whitespace outside of strings and comments
        "no-irregular-whitespace": 2,
        // disallow negation of the left operand of an in expression
        "no-negated-in-lhs": 2,
        // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-obj-calls": 2,
        // disallow multiple spaces in a regular expression literal
        "no-regex-spaces": 2,
        // disallow sparse arrays
        "no-sparse-arrays": 2,
        // disallow unreachable statements after a return, throw, continue, or break statement
        "no-unreachable": 2,
        // disallow comparisons with the value NaN
        "use-isnan": 2,
        // ensure JSDoc comments are valid
        "valid-jsdoc": 0,
        // ensure that the results of typeof are compared against a valid string
        "valid-typeof": 2,
        // Avoid code that looks like two expressions but is actually one
        "no-unexpected-multiline": 0,

        // disallow use of bitwise operators
        "no-bitwise": 0,
        // disallow use of unary operators, ++ and --
        "no-plusplus": 0,

        /*
         *  Node
         */

        // enforce return after a callback
        "callback-return": 0,
        // enforces error handling in callbacks (node environment)
        "handle-callback-err": 0,
        // disallow mixing regular variable and require declarations
        "no-mixed-requires": [0, false],
        // disallow use of new operator with the require function
        "no-new-require": 0,
        // disallow string concatenation with __dirname and __filename
        "no-path-concat": 0,
        // disallow process.exit()
        "no-process-exit": 0,
        // restrict usage of specified node modules
        "no-restricted-modules": 0,
        // disallow use of synchronous methods (off by default)
        "no-sync": 0,

        /*
         *  Style
         */

        // require or disallow use of semicolons instead of ASI
        "semi": [2, "always"],
        // disallow mixed spaces and tabs for indentation
        "no-mixed-spaces-and-tabs": 2,
        // disallow mixed "LF" and "CRLF" as linebreaks
        "linebreak-style": 0,
        // this option sets a specific tab width for your code
        // https://github.com/eslint/eslint/blob/master/docs/rules/indent.md
        "indent": [1, 2, { "SwitchCase": 1, "VariableDeclarator": 1 }],

        /*
         *  Variables
         */

        // enforce or disallow variable initializations at definition
        "init-declarations": 0,
        // disallow the catch clause parameter name being the same as a variable in the outer scope
        "no-catch-shadow": 0,
        // disallow deletion of variables
        "no-delete-var": 2,
        // disallow labels that share a name with a variable
        "no-label-var": 0,
        // disallow shadowing of names such as arguments
        "no-shadow-restricted-names": 2,
        // disallow declaration of variables already declared in the outer scope
        "no-shadow": 2,
        // disallow use of undefined when initializing variables
        "no-undef-init": 0,
        // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undef": 2,
        // disallow use of undefined variable
        "no-undefined": 0,
        // disallow declaration of variables that are not used in the code
        "no-unused-vars": [1, {"vars": "local", "args": "after-used"}],
        // disallow use of variables before they are defined
        "no-use-before-define": [2, "nofunc"],

        "quotes": [2, "single"],
        "babel/generator-star-spacing": 1,
        "babel/new-cap": [1, {"capIsNewExceptions": [
          "List",
          "Map",
          "OrderedMap",
          "Set",
          "OrderedSet",
          "Stack",
          "Range",
          "Repeat",
          "Record",
          "Seq",
          "Iterable",
          "Collection"
        ]}],
        "babel/object-shorthand": 1,
        "babel/arrow-parens": 0,
        "babel/no-await-in-loop": 1,
        "react/jsx-boolean-value": [2, "never"],
        "react/jsx-indent": [0, 2],
        "react/jsx-no-bind": 2,
        "react/jsx-no-duplicate-props": 2,
        "react/jsx-no-undef": 2,
        "react/jsx-space-before-closing": [2, "always"],
        "react/jsx-uses-react": 2,
        "react/jsx-uses-vars": 2,
        "react/react-in-jsx-scope": 2
    }


}